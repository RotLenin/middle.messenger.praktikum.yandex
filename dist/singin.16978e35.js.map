{"mappings":"SAAgBA,EAAgBC,EAAMC,GAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAI,CAEjCD,EADWD,EAAKE,cCIRE,EAAgBC,GAE5B,OAAOC,EADMD,EAAME,iBAKdD,EAAWC,GAChB,IAAKC,MAAAA,EAAKC,KAAEA,EAAIC,KAAEA,GAAQH,EAE1B,gBCfmBI,GACnB,QAAYC,IAARD,EACA,OAAO,EAEX,GAAoB,mBAARA,GAAsC,iBAARA,GAAoC,kBAARA,GAA6D,kBAAxCE,OAAOC,UAAUC,SAASC,KAAKL,GACtH,OAAO,EAEX,GAAW,MAAPA,GAA8B,IAAfA,EAAIR,OACnB,OAAO,EAEX,GAAoB,iBAARQ,EAAkB,CAG1B,IAAIM,GAAI,EAER,IAAK,IAAIC,KAAKP,EACVM,GAAI,EAER,OAAOA,EAGX,OAAO,EDNJE,CAAMX,aAkCKD,EAAQG,GACtBH,EAAOa,UAAUC,IAAI,0BACrB,IAAIC,EAAQC,EAAeb,GAC3BY,EAAME,UAAYF,EAAMG,QAAQH,MApC5BI,CAASnB,EAAQG,IACV,aA0BKH,EAAQG,GACxBH,EAAOa,UAAUO,OAAO,0BACZJ,EAAeb,GACrBc,UAAY,GA3BlBI,CAAWrB,EAAQG,IACZ,YAmBFa,EAAeb,GACpB,OAAOmB,SAASC,cAAa,0BAA2BpB,UElB5DqB,EArBc,CACV,CACIC,MAAQ,WACRC,SAAW,MACXC,MAAQ,oBACRxB,KAAO,WACPyB,QAAU,SACVC,SAAW,QACXC,IAAM,cAEV,CACIL,MAAQ,OACRC,SAAW,OACXC,MAAQ,qBACRxB,KAAO,OACHyB,QAAM,UACHC,SAAI,YACXC,IAAM,eCbd,MAAMC,EAAOT,SAASC,cAAc,SAuBmCQ,EAAAR,cAAA,eACvES,iBAAA,oBArBI,IAAIC,EAASF,EAAKG,iBAAiB,UAC9BC,OAAAA,EAAMC,KAAEA,YHccH,GAC3B,IAAIE,EAAS,GACTC,EAAO,GAWX,OATA5C,EAAgByC,GAASI,IACrB,IAAKpC,MAAAA,EAAKE,KAAEA,GAAQkC,EACpBD,EAAKjC,GAAQF,EAETF,EAAWsC,IACXF,EAAOG,KAAKD,EAAMlC,SAInB,CAACgC,OAASA,EAAQC,KAAOA,GG3BXG,CAAeN,GAGpC,GAD0DO,QAAlDC,IAAIN,EAAQC,GACC,IAAlBD,EAAOvC,OAAa,CACnB,IAAI8C,EAAOlB,EAAMmB,MAAKC,GAAQA,EAAKnB,QAAUW,EAAKX,OAASmB,EAAKlB,WAAaU,EAAKV,WAClF,OAAGgB,GACCG,aAAaC,QAAQ,OAAQC,KAAKC,UAAUN,IAC5CO,OAAOC,SAASC,KAAOF,OAAOC,SAASE,OAAhBH,cAChB,IAEgET,QAAAC,IAAA,iBAE3EV,EAAKR,cAAc,uBAAuBN,UAAY,6BAC/C,GAGgC,OAApC,KAKXzB,EAAgBuC,EAAKG,iBAAiB,UAAWmB,GAAOA,EAAGrB,iBAAiB,SAAUnC","sources":["src/utils/nodeListHelper.js","src/utils/inputValidation.js","src/utils/myLodash.js","src/data/users.js","src/handlers/loginFormHandler.js"],"sourcesContent":["export function NodeListforEach(list, fn){\n    for (let i = 0; i < list.length; i++){\n        let item = list[i];\n        fn(item)\n    }\n}","/** Утилита валидации полей формы */\n\nimport {empty} from \"./myLodash\";\nimport {NodeListforEach} from \"./nodeListHelper\";\n\n// Переход с валидации поля на общую\nexport function validationField(event){\n    let target = event.target;\n    return validation(target)\n\n}\n\nfunction validation(target){\n    let {value, type, name} = target;\n    //TODO : сделать валидацию по типу, пока просто на 0\n    if(empty(value)){\n        setError(target, name)\n        return false\n    }\n    resetError(target, name)\n    return true;\n}\n\nexport function validationForm(inputs){\n    let errors = [];\n    let data = {};\n\n    NodeListforEach(inputs, (input) => {\n        let {value, name} = input;\n        data[name] = value;\n\n        if(!validation(input)){\n            errors.push(input.name)\n        }\n    })\n\n    return {errors : errors, data : data}\n}\n\nfunction findErrorField(name){\n    return document.querySelector(`.form-input-error[name=${name}]`)\n}\n\nfunction resetError(target, name){\n    target.classList.remove('form-input_error-color');\n    let error = findErrorField(name);\n    error.innerHTML = '';\n}\n\nfunction setError(target, name){\n    target.classList.add('form-input_error-color');\n    let error = findErrorField(name)\n    error.innerHTML = error.dataset.error;\n}","export function empty( val ) {\n    if (val === undefined)\n        return true;\n\n    if (typeof (val) == 'function' || typeof (val) == 'number' || typeof (val) == 'boolean' || Object.prototype.toString.call(val) === '[object Date]')\n        return false;\n\n    if (val == null || val.length === 0)        // null or 0 length array\n        return true;\n\n    if (typeof (val) == \"object\") {\n        // empty object\n\n        var r = true;\n\n        for (var f in val)\n            r = false;\n\n        return r;\n    }\n\n    return false;\n}","// TODO: пока нет Api - поработаем со статикой\nconst USERS = [\n    {\n        login : 'RotLenin',\n        password : '123',\n        email : 'few0000@yandex.ru',\n        name : 'Alexandr',\n        surname : 'Gavrik',\n        chatName : 'Lenin',\n        tel : '9000000001',\n    },\n    {\n        login : 'user',\n        password : 'user',\n        email : 'rotlenin@yandex.ru',\n        name : 'Витя',\n        surname : 'Бирюков',\n        chatName : 'Тот самый',\n        tel : '9000000002',\n    },\n];\n\nexport default USERS","import {validationField, validationForm} from \"../utils/inputValidation\";\nimport {NodeListforEach} from \"../utils/nodeListHelper\";\n\nimport USERS from \"../data/users\";\n\nconst form = document.querySelector('.form')\n\nfunction auth(){\n    let inputs = form.querySelectorAll('input')\n    let {errors, data} = validationForm(inputs);\n    // Если ошибок при валидации нет - проводим авторизацию (пока со статикой)\n    console.log(errors, data);\n    if(errors.length === 0){\n        let user = USERS.find(user => user.login === data.login && user.password === data.password);\n        if(user){\n            localStorage.setItem('user', JSON.stringify(user))\n            window.location.href = window.location.origin + '/' + 'chat.html';\n            return true;\n        }\n        /** TODO: сделать функционал на очистку ошибки при изменении полей формы */\n        console.log('Bad data user');\n        form.querySelector('.form-action__error').innerHTML = 'Неверный Логин или Пароль'\n        return false\n    }\n    // Если есть ошибки - по хорошему заблокировать кнопку\n    return false\n}\n\n/** TODO - желательно проверять что это авторизация а не регистрация */\nform.querySelector('.accept-btn').addEventListener('click', auth);\nNodeListforEach(form.querySelectorAll('input'), (el) => el.addEventListener('change', validationField));\n"],"names":["$05d4be54a33c1426$export$946a316b136140cb","list","fn","i","length","$08d78bf2f0f6de9a$export$904f26ba11856898","event","$08d78bf2f0f6de9a$var$validation","target","value","type","name","val","undefined","Object","prototype","toString","call","r","f","$30f0c78e94ac9cdb$export$6e22c362a0406a2c","classList","add","error","$08d78bf2f0f6de9a$var$findErrorField","innerHTML","dataset","$08d78bf2f0f6de9a$var$setError","remove","$08d78bf2f0f6de9a$var$resetError","document","querySelector","$c36817a62f3a846c$export$2e2bcd8739ae039","login","password","email","surname","chatName","tel","$63b8885886c91d61$var$form","addEventListener","inputs","querySelectorAll","errors","data","input","push","$08d78bf2f0f6de9a$export$3d2be99315b43425","console","log","user1","find","user","localStorage","setItem","JSON","stringify","window","location","href","origin","el"],"version":3,"file":"singin.16978e35.js.map"}